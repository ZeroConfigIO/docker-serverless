name: Publish Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1' # At 00:00 on Monday.

env:
  DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      packages: write
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: 'main'

      - name: Get Last Serverless Tag
        id: sls
        run: |
          version="$(git ls-remote --tags --refs --sort="v:refname" https://github.com/serverless/serverless.git | awk '{print $2}' | sed 's/refs\/tags\/v//' | tail -n1)"
          echo "$version"
          echo "::set-output name=version::$version"

      - name: Get Last Published Tag
        id: tags
        run: |
          latest="$(git ls-remote --tags --refs --sort="v:refname" https://github.com/zeroconfigio/docker-serverless.git | awk '{print $2}' | sed 's/refs\/tags\/v//' | tail -n1)"
          echo "$latest"
          echo "::set-output name=latest::$latest"

      - name: Read Docker Image Identifiers
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: identifiers
        run: |
          image_repository="$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | sed 's/docker-//')"
          echo "$image_repository"
          echo "::set-output name=image_repository::$image_repository"

      - name: Release snapshot
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: release-snapshot
        uses: actions/create-release@latest
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ steps.sls.outputs.version }}
          release_name: v${{ steps.sls.outputs.version }}
          draft: false
          prerelease: false

      - name: Docker meta
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ steps.identifiers.outputs.image_repository }}
#            ghcr.io/${{ steps.identifiers.outputs.image_repository }}
#            public.ecr.aws/${{ steps.identifiers.outputs.image_repository }}
          labels: |
            org.opencontainers.image.authors=${{ github.repository_owner }}
          tags: |
            type=raw,value=${{ steps.sls.outputs.version }}
          flavor: |
            latest=true

      - name: Set up QEMU
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: qemu
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true
          driver-opts: image=moby/buildkit:master

      - name: Login to DockerHub
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: login-dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     # username: ${{ github.repository_owner }}
      #     username: ${{ github.actor }}
      #     password: ${{ github.token }}

      # - name: Login to Public ECR
      #   uses: docker/login-action@v1
      #   with:
      #     registry: public.ecr.aws
      #     username: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
      #     password: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
      #   env:
      #     AWS_REGION: us-east-1

      - name: Build and Push
        if: ${{ steps.sls.outputs.version != steps.tags.outputs.latest }}
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: .
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7,linux/ppc64le,linux/s390x
          build-args: SERVERLESS_VERSION=${{ steps.sls.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
